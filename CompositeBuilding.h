#ifndef COMPOSITEBUILDING_H
#define COMPOSITEBUILDING_H

#include "Building.h"
#include "BuildingIterator.h"
#include <vector>

/**
 * @class CompositeBuilding
 * @brief Represents a composite building that can contain multiple buildings.
 * 
 * The CompositeBuilding class aggregates multiple Building objects and manages
 * overall attributes like population and jobs. It provides functionalities for
 * adding, removing, and displaying individual buildings, as well as managing
 * city-wide metrics.
 */
class CompositeBuilding : public Building {
private:
    std::vector<Building*> buildings; ///< List of buildings within the composite building.
    int population;                   ///< Total population associated with the composite building.
    int jobs;                         ///< Total jobs associated with the composite building.

public:
    /**
     * @brief Default constructor that initializes a composite building with zero population and jobs.
     */
    CompositeBuilding();

    /**
     * @brief Constructs a CompositeBuilding with a specified population and jobs.
     * @param population Initial population.
     * @param jobs Initial jobs.
     */
    CompositeBuilding(int population, int jobs);

    /**
     * @brief Destructor that cleans up allocated buildings.
     */
    ~CompositeBuilding();

    /**
     * @brief Adds a building to the composite building.
     * @param building Pointer to the Building object to add.
     */
    void addBuilding(Building* building);

    /**
     * @brief Removes a specified building from the composite building.
     * @param building Pointer to the Building object to remove.
     */
    void removeBuilding(Building* building);

    /**
     * @brief Retrieves the list of buildings contained in the composite building.
     * @return A vector of pointers to Building objects.
     */
    vector<Building*> getbuildings();

    /**
     * @brief Displays information about all buildings in the composite building.
     */
    void display() override;

    /**
     * @brief Clones the current CompositeBuilding object.
     * @return A pointer to a new CompositeBuilding object.
     */
    Building* clone() const override;

    /**
     * @brief Performs maintenance on all buildings in the composite building.
     */
    void performMaintenance();

    /**
     * @brief Increases the total population of the composite building.
     * @param amount The amount to increase the population by.
     */
    void increasePopulation(int amount);

    /**
     * @brief Increases the total jobs of the composite building.
     * @param amount The amount to increase the jobs by.
     */
    void increaseJobs(int amount);

    /**
     * @brief Expands utilities for the composite building.
     */
    void expandUtilities();

    /**
     * @brief Displays the overall state of the city, including population and jobs.
     */
    void displayCityState();

    /**
     * @brief Manages capacity for each building in the composite building.
     */
    void manageCapacity();

    /**
     * @brief Integrates utilities across all buildings.
     */
    void integrateUtilities();

    /**
     * @brief Calculates the total tax revenue generated by the composite building.
     * @return The calculated tax revenue.
     */
    double calculateTaxRevenue() const;

    /**
     * @brief Performs maintenance on each building in the composite building.
     */
    void maintainBuildings();

    /**
     * @brief Tracks satisfaction levels across all buildings in the composite building.
     */
    void trackSatisfaction();

    /**
     * @brief Creates an iterator for the composite building.
     * @return A BuildingIterator for iterating over the buildings.
     */
    BuildingIterator createIterator();
};

#endif // COMPOSITEBUILDING_H
